#! /bin/bash

specruptiva() (

  set -eu

  if [ "$1" == "--debug" ]; then
    set -x
    shift 1
  fi

  _err() {
    >&2 echo "$@"
    exit 1
  }

  _get_root() {
    echo "$(readlink -f "$(dirname "$BASH_SOURCE")"/..)"
  }

  _help() {
    cat <<-EOM
  
  NAME
      specruptiva  -- outils de gestion centré sur les données

  SYNOPSIS
      # forme générale
      specruptiva GLOBAL_OPTIONS COMMAND OPTIONS ARGS...

      # cli
      specruptiva validate SCHEMA_FILE DATA_FILE   # valide que le fichier de données
                                                   #   est conforme au fichier schema

      # devops
      specruptiva build-wasm 
      specruptiva start-server
      specruptiva release (major|minor|patch) description
                                                  # incrémente la version et pousse sur le remote

  GLOBAL_OPTIONS

    --debug      # passe en mode debug (bash)

EOM

  }

  _validate() {
    ROOT=$(_get_root)
    go run $ROOT/cmd/cli/main.go ${@:-}
  }

  _buildwasm() {
    ROOT=$(_get_root)
    rm -f $ROOT/assets/json.wasm $ROOT/assets/wasm_exec.js
    GOOS=js GOARCH=wasm go build -o $ROOT/assets/json.wasm $ROOT/cmd/wasm/main.go
    cp $(go env GOROOT)/lib/wasm/wasm_exec.js $ROOT/assets/.
  }

  _startserver() {
    _buildwasm
    ROOT=$(_get_root)
    go run $ROOT/cmd/server/main.go
  }
  _new_version() {
    update_type=${1:-}
    latest=$(git tag | grep -E "^v([0-9]+\.([0-9]+))\.([0-9]+)$" | sort -r | head -n 1 | sed 's/^v//g')
    # lazy solution...
    major=$(echo $latest | cut -d. -f1)
    minor=$(echo $latest | cut -d. -f2)
    patch=$(echo $latest | cut -d. -f3)

    case "$update_type" in
    major)
      major=$((major + 1))
      minor=0
      patch=0
      ;;
    minor)
      minor=$((minor + 1))
      patch=0
      ;;
    patch)
      patch=$((patch + 1))
      ;;
    *)
      _err "type de release inconnu '$update_type'"
      ;;
    esac
    echo "v$major.$minor.$patch"
  }
  _release() {
    version=$(_new_version "$1")
    # todo: check version is ok
    # todo: check repo sanity ...
    # todo: check description
    git tag $version -m "${2}"
    # todo: checkout remote branch exists. if not push -u
    git push --tag
  }

  case "${1:-}" in
  "--help" | "")
    _help
    ;;
  release)
    _release "${@:2}"
    ;;
  validate | vet)
    _validate ${@:2}
    ;;
  build-wasm)
    _buildwasm
    ;;
  start-server)
    _startserver
    ;;
  *)
    _err "La commande '${1:-}' est inconnue"
    ;;

  esac
)

[ "$0" != "$BASH_SOURCE" ] || specruptiva "$@"
